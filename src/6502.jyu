
#import "Basic"; // assert

typealias Memory_Map_Read_Handler  = (entry: *Memory_Map_Entry, addr: uint16) -> (handled: bool, value: uint8);
typealias Memory_Map_Write_Handler = (entry: *Memory_Map_Entry, addr: uint16, value: uint8) -> bool;

struct Memory_Map_Entry {
    var cbdata: *void;
    var start: uint16;
    var end  : uint16; // points to the last byte handled by the handlers

    var read : Memory_Map_Read_Handler;
    var write: Memory_Map_Write_Handler;
}

struct Memory_Map {
    var mappings: [..] Memory_Map_Entry;

    func read(this: *Memory_Map, addr: uint16) -> (success: bool, value: uint8) {
        for * this.mappings {
            if addr >= it.start && addr <= it.end {
                if it.read {
                    var result = it.read(addr);
                    if result.handled return (true, result.value);
                }
            }
        }

        printf("FAIL to read from unmapped address: %04X\n", addr);
        return (false, cast(uint8) -1);
    }

    func write(this: *Memory_Map, addr: uint16, value: uint8) -> bool {
        for * this.mappings {
            if addr >= it.start && addr <= it.end {
                if it.write {
                    var handled = it.write(addr, value);
                    if handled return true;
                }
            }
        }

        printf("FAIL to write to unmapped address: %04X, value %02X\n", addr, value);
        return false;
    }
}

struct M6507 {

    let ADDRESS_BITS = 0b0001111111111111; // We only have 13 address lines on this chip
    let STACK_ADDRESS: uint16 = 0x100; // Stack starts in page 1 of memory

    // Bit format of opcode is generally aaabbbcc,
    // aaa = operation
    // bbb = addressing mode
    // cc  = register
    // Though this isnt consistently the case, there are many gaps
    // in the instruction set and many instructions are just outliers.
    // We only take advantage of this bit pattern in cases where we know
    // they are correct; this helps reduce code bloat from repeating
    // similar operations across multiple opcodes in the switch in step().

    let BBB_BITS   = (0b111 << 2);
    let MODE_ZP_X_INDIRECT = 0;
    let MODE_ZP    = (0b001 << 2);
    let MODE_ZP_Y_INDIRECT  = (0b100 << 2);
    let MODE_ZP_X  = (0b101 << 2); // In cc=10 instructions, becomes zeropage,Y
    let MODE_ABS   = (0b011 << 2);
    let MODE_ABS_Y = (0b110 << 2);
    let MODE_ABS_X = (0b111 << 2); // In cc=10 instructions, becomes absolute,Y


    let CC_BITS = 0b00000011;

    // Order is chosen to coincide the fact that  he lowest two bits
    // of the instruction format somewhat indicate the destination regiters.
    // Note that cc = 11 refers to undocumented instructions. Those instructions
    // are not implemented in this program.
    let REG_Y: uint8 = 0; // cc = 00
    let REG_A: uint8 = 1; // cc = 01
    let REG_X: uint8 = 2; // cc = 10

    let REG_S: uint8 = 3;

    var regs: [4] uint8;
    var PC: uint16;
    
    var P : uint8; // Status register

    var memory: Memory_Map;

    let STATUS_CARRY   : uint8 = (1 << 0); // 0 = no carry, 1 = carry
    let STATUS_ZERO    : uint8 = (1 << 1); // 0 = non zero, 1 = zero
    let STATUS_IRQ     : uint8 = (1 << 2); // 0 = IRQ enable, 1 = IRQ disable
    let STATUS_DEC     : uint8 = (1 << 3); // 0 = normal, 1 = BCD mode
    let STATUS_BREAK   : uint8 = (1 << 4); // 0 = IRQ/NMI, 1 = RESET or BRK/PHP
    let STATUS_OVERFLOW: uint8 = (1 << 6); // 1 = overflow
    let STATUS_SIGN    : uint8 = (1 << 7); // 0 = positive, 1 = negative

    func set_flags(this: *M6507, mask: uint8, values: uint8) {
        this.P = (this.P & ~mask) | (values & mask);
    }

    let NO_OFFSET: uint8   = 0;
    let X_OFFSET : uint8   = 1;
    let Y_OFFSET : uint8   = 2;

    func zero_page(this: *M6507, offset: uint8, register: uint8 = NO_OFFSET) -> uint16 {
        var reg: uint8;
        
        if (register == X_OFFSET) reg = this.regs[REG_X];
        else if (register == Y_OFFSET) reg = this.regs[REG_Y];

        return absolute(this, offset + reg);
    }

    func absolute(this: *M6507, offset: uint16, register: uint8 = NO_OFFSET) -> uint16 {
        var reg: uint8;
        if      register == X_OFFSET reg = this.regs[REG_X];
        else if register == Y_OFFSET reg = this.regs[REG_Y];
        return offset + reg;
    }

    func indirect(this: *M6507, offset: uint8, register: uint8) -> uint16 {
        if register == X_OFFSET {
            // @Incomplete is the address calculated once such if nn+X == 0xFF
            // then the hi byte would cross into 0x100? Or is it that nn+X
            // is calculated twice such that address 0xFF and 0x00 are used?
            // Currently we are doing the latter.
            var lo: uint16 = this.get_byte(zero_page(this, offset, X_OFFSET));
            var hi: uint16 = this.get_byte(zero_page(this, offset+1, X_OFFSET));

            return absolute(this, lo | (hi << 8));
        } else if register == Y_OFFSET {
            // @Incomplete same issue as the above case
            var lo: uint16 = this.get_byte(zero_page(this, offset));
            var hi: uint16 = this.get_byte(zero_page(this, offset+1));

            var addr = lo | (hi << 8);

            return absolute(this, addr, Y_OFFSET);
        }

        assert(false);
    }

    func do_reg2reg_mov(this: *M6507, dst: uint8, src: uint8, flag_mask: uint8) -> int {
        this.regs[dst] = this.regs[src];

        var flags = this.regs[dst] & STATUS_SIGN;
        if this.regs[dst] == 0 flags |= STATUS_ZERO;

        this.set_flags(flag_mask, flags);
        return 2;
    }

    func do_load_imm(this: *M6507, dst: uint8) -> int {
        var value = this.get_byte(this.PC);
        this.PC += 1;

        this.regs[dst] = value;

        var flags = this.regs[dst] & STATUS_SIGN;
        if this.regs[dst] == 0 flags |= STATUS_ZERO;

        this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);
        return 2;
    }

    func do_cond_branch(this: *M6507, cond: bool) -> int {
        var dd = cast(int8) get_byte(this, this.PC);
        this.PC += 1;

        var clks_ticked = 2;

        if (cond) {
            var old_pc = this.PC;
            this.PC += cast(uint16) cast(int16) dd;

            // If we take the branch, add a clock tick
            clks_ticked += 1;

            // If the branch crosses a page boundary
            // add a clock tick
            if (old_pc & 0xFF00) != (this.PC & 0xFF00) {
                clks_ticked += 1;
            }
        }

        return clks_ticked;
    }

    func stack_pop_byte(this: *M6507) -> uint8 {
        this.regs[REG_S] += 1;
        var addr = STACK_ADDRESS + this.regs[REG_S];
        return this.get_byte(addr);
    }

    func stack_pop_word(this: *M6507) -> uint16 {
        // @TODO what is the correct order here?
        var hi = cast(uint16) this.stack_pop_byte();
        var lo = cast(uint16) this.stack_pop_byte();

        return lo | (hi << 8);
    }

    func stack_push_byte(this: *M6507, value: uint8) {
        var addr = STACK_ADDRESS + this.regs[REG_S];
        this.set_byte(addr, value);
        this.regs[REG_S] -= 1;
    }

    func stack_push_word(this: *M6507, value: uint16) {
        var lo = value & 0xFF;
        var hi = (value & 0xFF00) >> 8;

        // @TODO what is the correct order here?
        stack_push_byte(this, cast(uint8) lo);
        stack_push_byte(this, cast(uint8) hi);
    }

    func do_addressing(this: *M6507, reg: uint8, mode: uint8, is_for_load: bool) -> (clks_ticked: int, address: uint16) {
        var addr: uint16;
        var offset_reg = NO_OFFSET;

        var clks_ticked = 0;

        if mode == MODE_ZP || mode == MODE_ZP_X {
            clks_ticked += 3;
            if mode == MODE_ZP_X {
                offset_reg = X_OFFSET;
                if reg == REG_X offset_reg = Y_OFFSET;

                clks_ticked += 1;
            }

            var nn = get_byte(this, this.PC);
            this.PC += 1;
            addr = zero_page(this, nn, offset_reg);
        } else if mode == MODE_ABS || mode == MODE_ABS_X || mode == MODE_ABS_Y {
            clks_ticked += 4;

            if mode == MODE_ABS_X {
                offset_reg = X_OFFSET;
                if reg == REG_X offset_reg = Y_OFFSET;

                // @Incomplete add a cycle if cross page boundary on load
                if !is_for_load clks_ticked += 1;
            } else if mode == MODE_ABS_Y {
                offset_reg = Y_OFFSET;

                // @Incomplete add a cycle if cross page boundary on load
                if !is_for_load clks_ticked += 1;
            }

            var nnnn = this.get_word(this.PC);
            this.PC += 2;
            addr = absolute(this, nnnn, offset_reg);
        } else if mode == MODE_ZP_X_INDIRECT || mode == MODE_ZP_Y_INDIRECT {
            clks_ticked += 5;
            if mode == MODE_ZP_X_INDIRECT {
                offset_reg = X_OFFSET;
                clks_ticked += 1;
            } else if mode == MODE_ZP_Y_INDIRECT {
                offset_reg = Y_OFFSET;

                // @Incomplete add a cycle if cross page boundary on load
                if !is_for_load clks_ticked += 1;
            }

            var nn = get_byte(this, this.PC);
            this.PC += 1;
            addr = indirect(this, nn, offset_reg);
        }

        return (clks_ticked, addr);
    }

    func step(this: *M6507) -> int {
        printf("PC: %04X\n", this.PC);

        var op = this.get_byte(this.PC);
        this.PC += 1;

        printf("REG A: %02X\n", this.regs[REG_A]);
        printf("REG X: %02X\n", this.regs[REG_X]);
        printf("REG Y: %02X\n", this.regs[REG_Y]);
        printf("REG S: %02X\n", this.regs[REG_S]);
        printf("REG P: %02X\n", this.P);

        printf("Opcode: %02X\n", op);

        var clks_ticked = 0;

        switch op {
            case 0xA8:
                clks_ticked += do_reg2reg_mov(this, REG_Y, REG_X, STATUS_SIGN | STATUS_ZERO);
            case 0xAA:
                clks_ticked += do_reg2reg_mov(this, REG_X, REG_A, STATUS_SIGN | STATUS_ZERO);
            case 0xBA:
                clks_ticked += do_reg2reg_mov(this, REG_X, REG_S, STATUS_SIGN | STATUS_ZERO);
            case 0x98:
                clks_ticked += do_reg2reg_mov(this, REG_A, REG_Y, STATUS_SIGN | STATUS_ZERO);
            case 0x8A:
                clks_ticked += do_reg2reg_mov(this, REG_A, REG_X, STATUS_SIGN | STATUS_ZERO);
            case 0x9A:
                clks_ticked += do_reg2reg_mov(this, REG_S, REG_X, 0);

            case 0xA9, 0xA2, 0xA0:
                var reg = op & CC_BITS;
                clks_ticked += do_load_imm(this, reg);

            // Load register from memory
            case 0xA4, 0xA5, 0xA6, 0xB4, 0xB5, 0xB6,       // Zero page ops
                 0xAC, 0xAD, 0xAE, 0xBC, 0xBD, 0xBE, 0xB9, // absolute ops
                 0xA1, 0xB1:                               // indirect ops
                var reg = op & CC_BITS;
                var result = this.do_addressing(reg, op & BBB_BITS, true);
                clks_ticked += result.clks_ticked;

                this.regs[reg] = this.get_byte(result.address);

                var flags = this.regs[reg] & STATUS_SIGN;
                if this.regs[reg] == 0 flags |= STATUS_ZERO;

                this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);

            // CMP A
            case 0xC9,             // #immediate
                 0xC5, 0xD5,       // Zero page ops
                 0xCD, 0xDD, 0xD9, // absolute ops
                 0xC1, 0xD1:       // indirect ops
                var reg = op & CC_BITS;

                var value: uint8;
                // #immediate
                if op == 0xC9 {
                    var nn = this.get_byte(this.PC);
                    this.PC += 1;

                    value = nn;
                    clks_ticked += 2;
                } else {
                    var result = this.do_addressing(reg, op & BBB_BITS, true);
                    clks_ticked += result.clks_ticked;

                    value = this.get_byte(result.address);
                }

                var final: uint16 = cast(uint16) this.regs[reg] + cast(uint16) (0xFF - value);
                var flags = cast(uint8) (final & STATUS_SIGN);
                if (final & 0xFF) == 0 flags |= STATUS_ZERO;
                if (final & 0x100) flags |= STATUS_CARRY;

                this.set_flags(STATUS_SIGN | STATUS_ZERO | STATUS_CARRY, flags);

            // CMP X, CMP Y
            case 0xE0, 0xE4, 0xEC, 0xC0, 0xC4, 0xCC:
                var reg = REG_X;

                if (op & 0xF0) == 0xC0 {
                    reg = REG_Y;
                }

                var value: uint8;
                // #immediate
                if (op & 0x0F) == 0x00 {
                    var nn = this.get_byte(this.PC);
                    this.PC += 1;

                    value = nn;
                    clks_ticked += 2;
                } else {
                    var result = this.do_addressing(reg, op & BBB_BITS, true);
                    clks_ticked += result.clks_ticked;

                    value = this.get_byte(result.address);
                }

                var final: uint16 = cast(uint16) this.regs[reg] + cast(uint16) (0xFF - value);
                var flags = cast(uint8) (final & STATUS_SIGN);
                if (final & 0xFF) == 0 flags |= STATUS_ZERO;
                if (final & 0x100) flags |= STATUS_CARRY;

                this.set_flags(STATUS_SIGN | STATUS_ZERO | STATUS_CARRY, flags);


            // Store register into memory
            case 0x84, 0x85, 0x86, 0x94, 0x95, 0x96, // zero page ops
                 0x8C, 0x8D, 0x8E, 0x9D, 0x99,       // absolute ops
                 0x81, 0x91:                         // indirect ops
                var reg = op & CC_BITS;
                var result = this.do_addressing(reg, op & BBB_BITS, false);
                clks_ticked += result.clks_ticked;

                this.set_byte(result.address, this.regs[reg]);

            // XOR
            case 0x49, 0x45, 0x55, 0x4D, 0x5D, 0x59, 0x41, 0x51:
                var reg =op & CC_BITS;

                var value: uint8;
                // immediate mode == 010 if cc == 01
                if (op & BBB_BITS) == (0b010 << 2) {
                    value = this.get_byte(this.PC);
                    this.PC += 1;
                    clks_ticked += 2;
                }  else {
                    var result = this.do_addressing(reg, op & BBB_BITS, true);
                    value = this.get_byte(result.address);
                    clks_ticked += result.clks_ticked;
                }

                this.regs[reg] ^= value;

                var flags = this.regs[reg] & STATUS_SIGN;
                if this.regs[reg] == 0 flags |= STATUS_ZERO;

                this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);

            // ADC
            case 0x69, 0x65, 0x75, 0x6D, 0x7D, 0x79, 0x61, 0x71:
                var reg =op & CC_BITS;

                var value: uint8;
                // immediate mode == 010 if cc == 01
                if (op & BBB_BITS) == (0b010 << 2) {
                    value = this.get_byte(this.PC);
                    this.PC += 1;
                    clks_ticked += 2;
                }  else {
                    var result = this.do_addressing(reg, op & BBB_BITS, true);
                    value = this.get_byte(result.address);
                    clks_ticked += result.clks_ticked;
                }

                var reg_value = this.regs[reg];
                var result = (cast(uint16) reg_value) + value + (this.P & STATUS_CARRY);
                this.regs[reg] = cast(uint8) result;

                var flags = this.regs[reg] & STATUS_SIGN;
                if this.regs[reg] == 0 flags |= STATUS_ZERO;
                if result & 0x100      flags |= STATUS_CARRY;

                // http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
                if ((reg_value^result) & (value^result) & 0x80) flags |= STATUS_OVERFLOW;

                this.set_flags(STATUS_SIGN | STATUS_ZERO | STATUS_CARRY | STATUS_OVERFLOW, flags);

            // SBC
            case 0xE9, 0xE5, 0xF5, 0xED, 0xFD, 0xF9, 0xE1, 0xF1:
                var reg =op & CC_BITS;

                var value: uint8;
                // immediate mode == 010 if cc == 01
                if (op & BBB_BITS) == (0b010 << 2) {
                    value = this.get_byte(this.PC);
                    this.PC += 1;
                    clks_ticked += 2;
                }  else {
                    var result = this.do_addressing(reg, op & BBB_BITS, true);
                    value = this.get_byte(result.address);
                    clks_ticked += result.clks_ticked;
                }

                var reg_value = this.regs[reg];
                var result = (cast(uint16) reg_value) + (0xFF - value) + (this.P & STATUS_CARRY) - 1;
                this.regs[reg] = cast(uint8) result;

                var flags = this.regs[reg] & STATUS_SIGN;
                if this.regs[reg] == 0 flags |= STATUS_ZERO;
                if result & 0x100      flags |= STATUS_CARRY;

                // http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
                if ((reg_value^result) & (value^result) & 0x80) flags |= STATUS_OVERFLOW;

                this.set_flags(STATUS_SIGN | STATUS_ZERO | STATUS_CARRY | STATUS_OVERFLOW, flags);

            // Shift Right Logical
            case 0x4A, 0x46, 0x56, 0x4E, 0x5E:
                var reg = op & CC_BITS;

                var value: uint8;
                if op == 0x4A {
                    // LSR A
                    var reg_value = this.regs[reg];
                    var flags = reg_value & STATUS_CARRY; // move bit 0 into carry flag

                    this.regs[REG_A] = this.regs[REG_A] >> 1;

                    if this.regs[REG_A] == 0 flags |= STATUS_ZERO;

                    // Clear sign flag always
                    this.set_flags(STATUS_SIGN | STATUS_ZERO | STATUS_CARRY, flags);
                    clks_ticked += 2;
                }  else {
                    // is is_for_load correct here?
                    var result = this.do_addressing(reg, op & BBB_BITS, true);
                    value = this.get_byte(result.address);
                    clks_ticked += result.clks_ticked + 2;

                    var flags = value & STATUS_CARRY; // move bit 0 into carry flag

                    value = value >> 1;

                    if value == 0 flags |= STATUS_ZERO;

                    // Clear sign flag always
                    this.set_flags(STATUS_SIGN | STATUS_ZERO | STATUS_CARRY, flags);

                    this.set_byte(result.address, value);
                }

            // Shift Left Logical
            case 0x0A, 0x06, 0x16, 0x0E, 0x1E:
                var reg = op & CC_BITS;

                var value: uint8;
                if op == 0x4A {
                    // LSR A
                    var reg_value = this.regs[reg];
                    var flags = reg_value & STATUS_CARRY; // move bit 0 into carry flag

                    this.regs[REG_A] = this.regs[REG_A] << 1;

                    flags |= this.regs[reg] & STATUS_SIGN;
                    if this.regs[REG_A] == 0 flags |= STATUS_ZERO;

                    // Clear sign flag always
                    this.set_flags(STATUS_SIGN | STATUS_ZERO | STATUS_CARRY, flags);
                    clks_ticked += 2;
                }  else {
                    // is is_for_load correct here?
                    var result = this.do_addressing(reg, op & BBB_BITS, true);
                    value = this.get_byte(result.address);
                    clks_ticked += result.clks_ticked + 2;

                    var flags = value & STATUS_CARRY; // move bit 0 into carry flag

                    value = value << 1;

                    flags |= this.regs[reg] & STATUS_SIGN;
                    if value == 0 flags |= STATUS_ZERO;

                    // Clear sign flag always
                    this.set_flags(STATUS_SIGN | STATUS_ZERO | STATUS_CARRY, flags);

                    this.set_byte(result.address, value);
                }

            // AND
            case 0x29, 0x25, 0x35, // Zero page ops
                 0x2D, 0x3D, 0x39, // absolute ops
                 0x21, 0x31:       // indirect ops

                // immediate version
                if (op == 0x29) {
                    var nn = this.get_byte(this.PC);
                    this.PC += 1;
                    clks_ticked += 2;

                    this.regs[REG_A] &= nn;

                    var flags = this.regs[REG_A] & STATUS_SIGN;
                    if this.regs[REG_A] == 0 flags |= STATUS_ZERO;

                    this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);
                } else {
                    var result = this.do_addressing(op & CC_BITS, op & BBB_BITS, true);
                    clks_ticked += result.clks_ticked;

                    this.regs[REG_A] = this.regs[REG_A] & this.get_byte(result.address);

                    var flags = this.regs[REG_A] & STATUS_SIGN;
                    if this.regs[REG_A] == 0 flags |= STATUS_ZERO;

                    this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);
                }
                

            // TEST
            case 0x24, 0x2C:
                var value: uint8;
                if op == 0x24 {
                    var nn = this.get_byte(this.PC);
                    this.PC += 1;
                    clks_ticked += 3;

                    value = this.get_byte(zero_page(this, nn));
                } else {
                    var nnnn = this.get_word(this.PC);
                    this.PC += 2;
                    clks_ticked += 4;

                    value = this.get_byte(absolute(this, nnnn));
                }

                var flags = (value & (STATUS_SIGN | STATUS_OVERFLOW));
                if ((this.regs[REG_A] & value) == 0) flags |= STATUS_ZERO;

                this.set_flags(STATUS_SIGN | STATUS_OVERFLOW | STATUS_ZERO, flags);

            case 0x18:
                this.set_flags(STATUS_CARRY, 0);
                clks_ticked += 2;
            case 0x58:
                this.set_flags(STATUS_IRQ, 0);
                clks_ticked += 2;
            case 0xD8:
                this.set_flags(STATUS_DEC, 0);
                clks_ticked += 2;
            case 0xB8:
                this.set_flags(STATUS_OVERFLOW, 0);
                clks_ticked += 2;
            case 0x38:
                this.set_flags(STATUS_CARRY, STATUS_CARRY);
                clks_ticked += 2;
            case 0x78:
                this.set_flags(STATUS_IRQ, STATUS_IRQ);
                clks_ticked += 2;
            case 0xF8:
                this.set_flags(STATUS_DEC, STATUS_DEC);
                clks_ticked += 2;
            case 0xEA: // NOP
                clks_ticked += 2;

            case 0x4C:
                var nnnn = this.get_word(this.PC);
                this.PC = nnnn;
                clks_ticked += 3;
            case 0x6C:
                var nnnn = this.get_word(this.PC);
                this.PC = this.get_word(absolute(this, nnnn));
                clks_ticked += 5;
            case 0x20:
                var nnnn = this.get_word(this.PC);
                this.stack_push_word(this.PC+2);
                // Do we need to inc/dec the stack pointer here?

                this.PC = nnnn;
                clks_ticked += 6;

            case 0x60:
                this.PC = this.stack_pop_word();
                printf("NEW PC: %04X\n", this.PC);
                clks_ticked += 6;

            case 0xE8, 0xC8: // INC X, INC Y
                var reg = REG_X;
                if op == 0xC8 reg = REG_Y;

                this.regs[reg] += 1;

                var flags = this.regs[reg] & STATUS_SIGN;
                if this.regs[reg] == 0 flags |= STATUS_ZERO;

                this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);

                clks_ticked += 2;

            // INC memory
            case 0xE6, 0xF6, 0xEE, 0xFE:
                var result = this.do_addressing(op & CC_BITS, op & BBB_BITS, false);
                var value = this.get_byte(result.address);
                clks_ticked += result.clks_ticked + 2;

                value += 1;

                var flags = value & STATUS_SIGN;
                if value == 0 flags |= STATUS_ZERO;

                // Clear sign flag always
                this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);

                this.set_byte(result.address, value);

            // DEC memory
            case 0xC6, 0xD6, 0xCE, 0xDE:
                var result = this.do_addressing(op & CC_BITS, op & BBB_BITS, false);
                var value = this.get_byte(result.address);
                clks_ticked += result.clks_ticked + 2;

                value -= 1;

                var flags = value & STATUS_SIGN;
                if value == 0 flags |= STATUS_ZERO;

                // Clear sign flag always
                this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);

                this.set_byte(result.address, value);

            case 0x88, 0xCA: // DEC X, DEC Y
                var reg = REG_X;
                if op == 0xC8 reg = REG_Y;

                this.regs[reg] -= 1;

                var flags = this.regs[reg] & STATUS_SIGN;
                if this.regs[reg] == 0 flags |= STATUS_ZERO;

                this.set_flags(STATUS_SIGN | STATUS_ZERO, flags);

                clks_ticked += 2;

            case 0x10:
                clks_ticked += do_cond_branch(this, (this.P & STATUS_SIGN) == 0);
            case 0x30:
                clks_ticked += do_cond_branch(this, (this.P & STATUS_SIGN) != 0);
            case 0x50:
                clks_ticked += do_cond_branch(this, (this.P & STATUS_OVERFLOW) == 0);
            case 0x70:
                clks_ticked += do_cond_branch(this, (this.P & STATUS_OVERFLOW) != 0);
            case 0x90:
                clks_ticked += do_cond_branch(this, (this.P & STATUS_CARRY) == 0);
            case 0xB0:
                clks_ticked += do_cond_branch(this, (this.P & STATUS_CARRY) != 0);
            case 0xD0:
                clks_ticked += do_cond_branch(this, (this.P & STATUS_ZERO) == 0);
            case 0xF0:
                clks_ticked += do_cond_branch(this, (this.P & STATUS_ZERO) != 0);
        
        }

        if clks_ticked == 0 {
            printf("Unhandled opcode %02X\n", op);
        }

        return clks_ticked;
    }

    func get_byte(this: *M6507, _addr: uint16) -> uint8 {
        var addr = _addr;
        addr &= ADDRESS_BITS;

        var success: bool;
        var value: uint8;

        (success, value) = this.memory.read(addr);
        assert(success, "get_byte failed");
        return value;
    }

    func set_byte(this: *M6507, _addr: uint16, value: uint8) {
        var addr = _addr;
        addr &= ADDRESS_BITS;

        var success: bool;

        success = this.memory.write(addr, value);
        // assert(success, "set_byte failed");
    }

    func set_word(this: *M6507, _addr: uint16, value: uint16) {
        var lo: uint8 = cast(uint8) (value & 0xFF);
        var hi: uint8 = cast(uint8) ((value >> 8) & 0xFF);
        set_byte(this, _addr, lo);
        set_byte(this, _addr+1, hi);
    }

    func get_word(this: *M6507, addr: uint16) -> uint16 {
        var lo: uint16 = get_byte(this, addr);
        var hi: uint16 = get_byte(this, addr+1);

        return lo | (hi << 8);
    }
}