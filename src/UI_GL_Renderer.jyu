
#import "UI";
#import "LibC"; // malloc
#import "OpenGL";
#import "Basic"; // to_c_string

#clang_import """
#include "stb_truetype.h"
""";

struct UI_GL_Renderer : UI.Renderer {
    typealias Font       = UI.Font;
    typealias coord_type = UI.coord_type;
    typealias Color      = UI.Color;
    typealias Handle     = UI.Handle;

    var context: *UI.Context;

    func make(context: *UI.Context) -> UI_GL_Renderer {
        var rdr: UI_GL_Renderer;
        rdr.draw_string = cast() _draw_string;
        rdr.draw_rect   = cast() _draw_rect;
        rdr.context = context;
        return rdr;
    }

    func _draw_string(this: *UI_GL_Renderer, _x: coord_type, _y: coord_type, str: string, font: *Font) -> float {
        var x = _x; var y = _y;
        y += font.height * 3.0/4.0;
        var font_info = cast(*Stb_Font_Info) font.handle.pointer;

        // assume orthographic projection with units = screen pixels, origin at top left
        glEnable(GL_TEXTURE_2D);
        glBindTexture(GL_TEXTURE_2D, font_info.ftex);
        glBegin(GL_QUADS);
        for 0..<str.length {
            var ch = str[it];
            if (ch >= 32 && ch < 128) {
                var q: stbtt_aligned_quad;
                stbtt_GetBakedQuad(font_info.cdata.data, 512,512, cast(int32) (ch-32), *x,*y,*q,1);//1=opengl & d3d10+,0=d3d9
                glTexCoord2f(q.s0,q.t0); glVertex2f(q.x0,q.y0);
                glTexCoord2f(q.s1,q.t0); glVertex2f(q.x1,q.y0);
                glTexCoord2f(q.s1,q.t1); glVertex2f(q.x1,q.y1);
                glTexCoord2f(q.s0,q.t1); glVertex2f(q.x0,q.y1);
            }
        }
        glEnd();
        return x - _x;
    }

    func _draw_rect(this: *UI_GL_Renderer, x: coord_type, y: coord_type, width: coord_type, height: coord_type, color: Color) {

    }

    struct Stb_Font_Info {
        var cdata: [96] stbtt_bakedchar; // ASCII 32..126 is 95 glyphs
        var ftex: GLuint;
    }

    func make_font(this: *UI_GL_Renderer, path: string, size: coord_type) -> *Font {
        var ttf_buffer = cast(*uint8) malloc(1 << 20);
        fread(ttf_buffer, 1, 1<<20, fopen(to_c_string(path), "rb"));

        var font_info = New<Stb_Font_Info>();

        var temp_bitmap = cast(*uint8) malloc(512*512);
        stbtt_BakeFontBitmap(ttf_buffer,0, cast(float) size, temp_bitmap, 512,512, 32,96, font_info.cdata.data); // no guarantee this fits!

        glGenTextures(1, *font_info.ftex);
        glBindTexture(GL_TEXTURE_2D, font_info.ftex);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_ALPHA, 512,512, 0, GL_ALPHA, GL_UNSIGNED_BYTE, temp_bitmap);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

        free(temp_bitmap);
        free(ttf_buffer);

        var font = Font.new(Handle.make(font_info), size);
        return font;
    }
}
