#import "LibC";
#import "GLFW";
#import "OpenGL";
#import "Array";

#load "6502.jyu";

func cartridge_read(entry: *Memory_Map_Entry, _addr: uint16) -> uint8 {
    var addr = _addr;
    var rom = <<cast(*string) entry.cbdata;

    addr &= M6507.ADDRESS_BITS;
    addr -= 0x1000; // map address from 0x1000-0x1FFF to 0x0000-0x0FFF

    if rom.length < 4096 {
        addr %= 2048; // mirror 2k ROM twice across the 4k address range.
    }

    return rom[addr];
}

func cartridge_write(entry: *Memory_Map_Entry, _addr: uint16, value: uint8) -> void {
    var addr = _addr;
    var rom = <<cast(*string) entry.cbdata;
    addr &= M6507.ADDRESS_BITS;
    addr -= 0x1000; // map address from 0x1000-0x1FFF to 0x0000-0x0FFF

    rom[addr] = value;
}

func concat(a: string, b: string) -> string {
    var len = a.length + b.length;
    var o: string;
    o.data = cast() malloc(cast(size_t) len);
    o.length = len;
    memcpy(o.data, a.data, cast(size_t) a.length);
    memcpy(o.data + a.length, b.data, cast(size_t) b.length);
    return o;
}

var step_cpu = false;
func key_callback(window: *GLFWwindow, key: int32, scancode: int32, action: int32, mods: int32) -> void {
    if key == GLFW_KEY_SPACE && action == 1 {
        step_cpu = true;
    }
}

func main() {
    if glfwInit() != 1 return;

    glfwWindowHint(GLFW_SCALE_TO_MONITOR, 1);

    var window = glfwCreateWindow(640, 480, "a2600", null, null);
    if !window {
        glfwTerminate();
        return;
    }

    glfwMakeContextCurrent(window);

    glfwSetKeyCallback(window, cast() key_callback);

    func get_proc(name: string) -> *void {
        var addr = glfwGetProcAddress(name.data);
        return addr;
    }

    init_gl_functions(get_proc);

    var cpu: M6507;

    var rom_image = read_entire_file("game.bin");

    var cart: Memory_Map_Entry;
    cart.cbdata = *rom_image;
    cart.start = 0x1000;
    cart.end   = 0x1FFF;
    cart.read  = cartridge_read;
    cart.write = cartridge_write;

    cpu.memory.mappings.add(cart);

    var entry_point = cpu.get_word(0xFFFC);
    cpu.PC = entry_point;

    var scanlines = 262; // NTSC, PAL is 312
    var pixels_per_scanline = 228;
    var framebuffer = cast(*uint32) malloc(cast() (scanlines * pixels_per_scanline * sizeof(uint32)));

    var fb_tex: GLuint;
    glGenTextures(1, *fb_tex);
    glBindTexture(GL_TEXTURE_2D, fb_tex);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, cast() pixels_per_scanline, cast() scanlines, 0, GL_RGBA, GL_UNSIGNED_BYTE, framebuffer);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

    while !glfwWindowShouldClose(window) {
        glClear(GL_COLOR_BUFFER_BIT);
        glClearColor(0, 0, 0, 1);

        if step_cpu {
            step_cpu = false;

            cpu.step();
        }

        glEnable(GL_TEXTURE_2D);
        glBindTexture(GL_TEXTURE_2D, fb_tex);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, cast() pixels_per_scanline, cast() scanlines, 0, GL_RGBA, GL_UNSIGNED_BYTE, framebuffer); // @Speed

        glBegin(GL_TRIANGLES);
            glTexCoord2f(0, 1);
            glVertex3f(-1, -1, 0);
            glTexCoord2f(1, 1);
            glVertex3f(1, -1, 0);
            glTexCoord2f(1, 0);
            glVertex3f(1, 1, 0);

            glTexCoord2f(1, 0);
            glVertex3f(1, 1, 0);
            glTexCoord2f(0, 0);
            glVertex3f(-1, 1, 0);
            glTexCoord2f(0, 1);
            glVertex3f(-1, -1, 0);
        glEnd();


        glfwPollEvents();
        glfwSwapBuffers(window);
    }

    glfwTerminate();
}